#!/bin/bash -
# Copyright (C) 2016, Vaughan Agrez <devel@agrez.net>
# Copyright (C) 2016, 2017, Mingcong Bai <jeffbai@aosc.io>
# Copyright (C) 2016, 2017, Icenowy Zheng <icenowy@aosc.io>
# fedberry-config is released under GPL licence (version 3)
# cyanberry-config is based on fedberry-config with adaptations for AOSC OS.
# See LICENSE file for copyright and license details

# cyanberry-config is a name inspired by "fedberry" - a Fedora-based Linux
# distribution for Raspberry Pi - while AOSC OS currently holds a codename of
# "CyanFlame", therefore we have cyanberries at hand!

###
# VARIABLE_DEFINITIONS
###

### Software
NAME=cyanberry-config
AUTHORS="Vaughan Agrez, Mingcong Bai, Icenowy Zheng"
YEAR=2017
VERSION=0.1.2
BUG_REPORTS="https://github.com/AOSC-Dev/cyanberry-config"


### Environment variables
BOOT_DIR=/boot
ETC_DIR=/etc
CFG_TXT="$BOOT_DIR"/config.txt
CMD_TXT="$BOOT_DIR"/cmdline.txt
DTO_DIR="$BOOT_DIR"/overlays
FSTAB="$ETC_DIR"/fstab


### Misc standard messages / args
TXT_ENB="is currently ENABLED in $CFG_TXT\n\nDo you want to DISABLE it?"
TXT_DIS="is currently DISABLED in $CFG_TXT\n\nDo you want to ENABLE it?"
MENU_ARGS="MENU_TITLES MENU_BUTTONS MENU_ITEMS MENU_ACTIONS"

### Default DTP & config opt values
declare -A DEF_VALS=(
    [gpu_mem]=64
    [start_x]=0
    [i2c]=off
    [i2s]=off
    [spi]=off
    [audio]=off
    )

### Name references for various DTOs, DTPs & config options
declare -A REF_NAMES=(
    [start_x]="RPi Camera"
    [vc4-kms-v3d]="VC4 Mesa"
    [lirc-rpi]="RPi LIRC"
    [i2c-rtc]="I2C RTC"
    [i2c]="I2C interface"
    [i2s]="I2S interface"
    [spi]="SPI interface"
    [audio]="Alsa audio interface"
    )


###
# FUNCTION_DEFINITIONS
###

msg_box()
{
    if [[ $NO_DIALOG -ne 1 ]]; then
        if [ -z "$2" ]; then
            whiptail --msgbox "$1" 20 65
        else
            whiptail --msgbox --title "$1" "$2" 20 65
        fi
    else
        echo -e "$1\n$2"
    fi
}


yes_no()
{
    if [ -z "$2" ]; then
        whiptail --yesno "$1" 20 60
    else
        whiptail --yesno --title "$1" "$2" 20 60
    fi
}


ask_reboot()
{
    # If needed, offer a reboot
    if [[ $SGST_REBOOT -eq 1 ]]; then
        if [ -z "$1" ]; then
            yes_no "Reboot Required" "A reboot is required for changes to take affect.\n\nDo you want to reboot now?"
        else
            yes_no "Reboot Required" "$1\n\nDo you want to reboot now?"
        fi

        if [ $? == 0 ]; then
            sync
            # add a timer option here to delay reboot by 5 secs?
            shutdown -r now
            exit 0
        else
            SGST_REBOOT=0
        fi
    fi
}


dialog_menu()
{
    while true; do
        local -n TITLE=$1
        local -n BUTTONS=$2
        local -n ITEMS=$3
        local -n ACTIONS=$4

        DLG_CMD=(whiptail --title "${TITLE[0]}" --menu "${TITLE[1]}" --backtitle "$NAME - $VERSION" --ok-button "${BUTTONS[0]}" --cancel-button "${BUTTONS[1]}" $DLG_H $DLG_W $DLG_MH)

        SEL=$("${DLG_CMD[@]}" "${ITEMS[@]}" 3>&1 1>&2 2>&3)
        RETVAL=$?

        case $RETVAL in
            0) eval ${ACTIONS[$SEL]} ;;
            1) break ;;
            255) echo "Esc Pressed" ;;
        esac
    done
}


dialog_prog()
{
    whiptail --gauge "$1" 10 70 0
}


dialog_size()
{
    DLG_H=17
    DLG_MH=$(($DLG_H-9))
    DLG_W=$(tput cols)

    if [ -z "$DLG_W" -a "$DLG_W" -lt 60 ]; then
        DLG_W=80
    elif [ "$DLG_W" -gt 178 ]; then
        DLG_W=120
    fi
}


dtree_enable()
{
    #Force enabling of Device Tree support
    if [[ $(grep -cim1 ^device_tree= $CFG_TXT) -eq 1 ]]; then
        #remember, its the opposite!
        cfg_disable device_tree
    fi
}



dto_probe()
{
    # Define the DTO variables
    DTO="dtoverlay=$1"
    DTB="$1-overlay.dtb"
    DTBO="$1.dtbo"

    # Test config.txt for DTO
    DTO_ENABLED=$(grep -cim1 ^$DTO $CFG_TXT)
    DTO_DISABLED=$(grep -cim1 ^#$DTO $CFG_TXT)
}



dto_enable()
{
    dto_probe $1

    if [ ! -f $DTO_DIR/$DTB ] && [ ! -f $DTO_DIR/$DTBO ]; then
        echo "ERROR:" "can't find $DTO or $DTBO in current kernel"
        return 0
    fi

    if [ $DTO_DISABLED -eq 1 ]; then
        dto_write enable $1
        SGST_REBOOT=1
    elif [ $DTO_ENABLED -ne 1 ]; then
        dto_write add $1
        SGST_REBOOT=1
    fi
}


dto_disable()
{
    dto_probe $1
    if [ $DTO_ENABLED -eq 1 ]; then
        dto_write disable $1
        SGST_REBOOT=1
    fi
}




dto_write()
{
    if [ $1 == "enable" ]; then
        dtree_enable
        sed -i "s/^#$DTO/$DTO/" $CFG_TXT
    elif [ $1 == "add" ]; then
        dtree_enable
        echo -e "$DTO" >> $CFG_TXT
    elif [ $1 == "disable" ]; then
        sed -i "s/^$DTO/#$DTO/" $CFG_TXT
    fi
}


dto_prm_update()
{
    #1st arg = DTO name; 2nd arg = new parameter value
    sed -i "s/^dtoverlay=$1.*$/dtoverlay=$1,$2/" $CFG_TXT
}



dto_ask()
{
    # reset for each selection
    BAILED=0
    DRV_DISABLED=0

    # test for no-reboot switch
    NO_REBOOT=$(echo "$@"| grep -ci "\-\-no\-reboot")

    # Test config.txt for DTO references
    dto_probe $1

    if [ ! -f $DTO_DIR/$DTB ] && [ ! -f $DTO_DIR/$DTBO ]; then
        msg_box "ERROR:" "can't find $DTO or $DTBO in current kernel"
        NO_OVERLAY=1
    else
        if [ $DTO_ENABLED -eq 1 ]; then
            #DTO is enabled already
            yes_no "${REF_NAMES[$1]} $TXT_ENB"
            if [ $? -eq 0 ]; then
                dto_write disable $1
                SGST_REBOOT=1
                DRV_DISABLED=1
            else
                BAILED=1
            fi
        elif [ $DTO_DISABLED -eq 1 ]; then
            #DTO is disabled
            yes_no "${REF_NAMES[$1]} $TXT_DIS"
            if [ $? -eq 0 ]; then
                dto_write enable $1
                SGST_REBOOT=1
            else
                BAILED=1
            fi
        else
            #no DTO ref exists, add the requested DTO
            yes_no "${REF_NAMES[$1]} $TXT_DIS"
            if [ $? -eq 0 ]; then
                dto_write add $1
                SGST_REBOOT=1
            else
                BAILED=1
            fi
        fi

        # If needed, offer a reboot
        [[ $NO_REBOOT -ne 1 ]] && [[ $SGST_REBOOT -eq 1 ]] && ask_reboot
    fi
}


dtp_probe()
{
    # Test for config option
    DTP_ENABLED=$(grep -cim1 ^dtparam=$1 $CFG_TXT)
    DTP_DISABLED=$(grep -cim1 ^#dtparam=$1 $CFG_TXT)
    DTP_VAL=$(grep -E "^dtparam=$1|^#dtparam=$1" $CFG_TXT| sed "s/.*$1=//")

}


dtp_enable()
{
    dtp_probe $1
    if [ $DTP_DISABLED -eq 1 ]; then
        dtp_write enable $1
        SGST_REBOOT=1
    elif [ $DTP_ENABLED -ne 1 ]; then
        dtp_write add $1
        SGST_REBOOT=1
    fi
}


dtp_disable()
{
    dtp_probe $1
    if [ $DTP_ENABLED -eq 1 ]; then
        dtp_write disable $1
        SGST_REBOOT=1
    fi
}


dtp_write()
{
    if [ $1 == "enable" ]; then
        sed -i "s/^#dtparam=$2/dtparam=$2/" $CFG_TXT
    elif [ $1 == "add" ]; then
        echo "dtparam=$2=${DEF_VALS[$2]}" >> $CFG_TXT
    elif [ $1 == "disable" ]; then
        sed -i "s/^dtparam=$2/#dtparam=$2/" $CFG_TXT
    fi
}


dtp_ask()
{
    # reset for each selection
    BAILED=0

    # test for no-reboot switch
    NO_REBOOT=$(echo "$@"| grep -ci "\-\-no\-reboot")

   # Test for config.txt option
    dtp_probe $1

    if [ $DTP_ENABLED -eq 1 ]; then
        #dtp ref is enabled already
        yes_no "${REF_NAMES[$1]} $TXT_ENB"
        if [ $? -eq 0 ]; then
            dtp_write disable $1
            SGST_REBOOT=1
            OPT_DISABLED=1
        else
            BAILED=1
        fi
    elif [ $DTP_DISABLED -eq 1 ]; then
        #config ref is disabled
        yes_no "${REF_NAMES[$1]} $TXT_DIS"
        if [ $? -eq 0 ]; then
            dtp_write enable $1
            SGST_REBOOT=1
        else
            BAILED=1
        fi
    else
        #no config ref exists, add it
        yes_no "${REF_NAMES[$1]} $TXT_DIS"
        if [ $? -eq 0 ]; then
            dtp_write add $1
            SGST_REBOOT=1
        else
            BAILED=1
        fi
    fi

    # If needed, offer a reboot
    [[ $NO_REBOOT -ne 1 ]] && [[ $SGST_REBOOT -eq 1 ]] && ask_reboot
}



cfg_probe()
{
    # Test for config option
    CFG_ENABLED=$(grep -cim1 ^$1 $CFG_TXT)
    CFG_DISABLED=$(grep -cim1 ^#$1 $CFG_TXT)
    CFG_VAL=$(grep -E "^$1|^#$1" $CFG_TXT| sed "s/.*$1=//")
}


cfg_enable()
{
    cfg_probe $1
    if [ $CFG_DISABLED -eq 1 ]; then
        cfg_write enable $1
        SGST_REBOOT=1
    elif [ $CFG_ENABLED -ne 1 ]; then
        cfg_write add $1
        SGST_REBOOT=1
    fi
}


cfg_disable()
{
    cfg_probe $1
    if [ $CFG_ENABLED -eq 1 ]; then
        cfg_write disable $1
        SGST_REBOOT=1
    fi
}


cfg_write()
{
    if [ $1 == "enable" ]; then
        sed -i "s/^#$2/$2/" $CFG_TXT
    elif [ $1 == "add" ]; then
        echo "$2=${DEF_VALS[$2]}" >> $CFG_TXT
    elif [ $1 == "disable" ]; then
        sed -i "s/^$2/#$2/" $CFG_TXT
    fi
}


config_ask()
{
    # reset for each selection
    BAILED=0

    # test for no-reboot switch
    NO_REBOOT=$(echo "$@"| grep -ci "\-\-no\-reboot")

   # Test for config.txt option
    cfg_probe $1

    if [ $CFG_ENABLED -eq 1 ]; then
        #config ref is enabled already
        yes_no "${REF_NAMES[$1]} $TXT_ENB"
        if [ $? -eq 0 ]; then
            cfg_write disable $1
            SGST_REBOOT=1
            OPT_DISABLED=1
        else
            BAILED=1
        fi
    elif [ $CFG_DISABLED -eq 1 ]; then
        #config ref is disabled
        yes_no "${REF_NAMES[$1]} $TXT_DIS"
        if [ $? -eq 0 ]; then
            cfg_write enable $1
            SGST_REBOOT=1
        else
            BAILED=1
        fi
    else
        #no config ref exists, add it
        yes_no "${REF_NAMES[$1]} $TXT_DIS"
        if [ $? -eq 0 ]; then
            cfg_write add $1
            SGST_REBOOT=1
        else
            BAILED=1
        fi
    fi

    # If needed, offer a reboot
    [[ $NO_REBOOT -ne 1 ]] && [[ $SGST_REBOOT -eq 1 ]] && ask_reboot
}


cfg_check()
{
    # We need a config.txt
    if [ ! -f $CFG_TXT ]; then
        echo "Can't find $CFG_TXT, Please check your system!"
        #Offer the option to create one here?
        exit 1
    fi

    # NOTE: It adds another layer of complexity to deal with device_tree_param/dtparam
    # and device_tree_overlay/dtoverlay refs independently. So if found, just replace
    # them all accordingly

    if [[ $(grep -cim1 device_tree_param $CFG_TXT) -eq 1 ]]; then
        sed -i 's/device_tree_param/dtparam/' $CFG_TXT
    fi

    if [[ $(grep -cim1 device_tree_overlay $CFG_TXT) -eq 1 ]]; then
        sed -i 's/device_tree_overlay/dtoverlay/' $CFG_TXT
    fi
}


cfg_val_update()
{
    #1st arg = config / paramater name; 2nd arg = new parameter value
    sed -i "s/^$1=.*$/$1=$2/" $CFG_TXT
}

mesa_vc4()
{
    msg_box "WARNING" "The Mesa VC4 driver is EXPERIMENTAL and a W.I.P. It will likely cause system instability."
    dto_ask vc4-kms-v3d --no-reboot
    if [[ $BAILED -ne 1 ]] && [[ $NO_OVERLAY -ne 1 ]]; then
        if [[ $DRV_DISABLED -eq 1 ]]; then
            cfg_enable gpu_mem
        else
            cfg_disable gpu_mem
            #currently conflicts with pi camera requirements
            cfg_disable start_x
        fi
    fi
    ask_reboot
}


pi_camera()
{
    config_ask start_x --no-reboot
    if [[ $BAILED -ne 1 ]]; then
        if [[ $OPT_DISABLED -ne 1 ]]; then
            cfg_enable gpu_mem
            #currrently conflicts with the vc4 driver requirements
            dto_disable vc4-kms-v3d
            cfg_disable avoid_warnings
            [[ $CFG_VALUE -lt 128 ]] && cfg_val_update gpu_mem 128
        fi
    fi
    ask_reboot
}


bt_ask()
{
    if hcitool dev |grep hci &>/dev/null || systemctl is-enabled brcm43438.service &>/dev/null; then
        yes_no "Disable RPi 3 Bluetooth" "Do you want to disable bluetooth support for your RPi 3?"
        [ $? == 1 ] && return 0 || bt_disable
    else
        yes_no "Enable RPi 3 Bluetooth" "Do you want to enable bluetooth support for your RPi 3?"
        [ $? == 1 ] && return 0 || bt_enable
    fi

    ask_reboot
}


bt_enable()
{
    #check for RPi3 device
    if ! cat /sys/firmware/devicetree/base/model |grep -c "Raspberry Pi 3 Model B" &>/dev/null; then
        msg_box "Raspberry Pi 3 Model B not found, can not proceed"
        return 0
    fi

    #ensure pi3-disable-bt overlay is disabled
    dto_disable pi3-disable-bt

    #enable / start systemd service
    systemctl enable brcm43438.service &>/dev/null
    systemctl start brcm43438.service &>/dev/null
}


bt_disable()
{
    #stop & disable systemd service
    systemctl stop brcm43438.service  &>/dev/null
    systemctl disable brcm43438.service  &>/dev/null

    #enable pi3-disable-bt overlay
    dto_enable pi3-disable-bt
}


swap_add()
{
    #we need an argument
    if [[ "$1" == "" ]]; then
        echo "Missing argument"
        return 0
    fi

    #check for existing swap file
    CHECK_SWAP=$(swapon --show --noheadings)
    if [ "$CHECK_SWAP" != "" ]; then
        msg_box "Existing swap file/partition found, can not proceed."
        return 0
    fi

    #check for sufficient disk space (swap + min 1GB extra?)
    ROOTFS_INFO=( $(df |grep " /$") )
    ROOTFS_FREE=$(echo ${ROOTFS_INFO[3]})
    SWAP_REQ=$(($1 * 1024))
    REQ_FREE=$(($SWAP_REQ + 1048576))

    if [ $ROOTFS_FREE -lt $REQ_FREE ]; then
        msg_box "Insufficient free space on rootfs."
        return 0
    fi

    #create swap file & format it.
    SWAP_MSG="Creating $1MB swap file, please wait..."

    if [ $NO_DIALOG -eq 1 ]; then
        msg_box "$SWAP_MSG"
        pv -p --size "$1"M /dev/zero | dd of=/swapfile bs=1k count="$1"k status=noxfer
        mkswap /swapfile
    else
        (pv -n --size "$1"M /dev/zero | dd of=/swapfile bs=1k count="$1"k status=noxfer && mkswap /swapfile) 2>&1 | dialog_prog "$SWAP_MSG"
    fi

    #could we use fallocate here as its much faster? or will we end up with a sparse file?
    #Note: Btrfs does not support swap files and fallocate may cause problems with F2FS or XFS
    #fallocate -l '$1'M /swapfile

    #world readable swap files are a huge local vulnerability
    chmod 600 /swapfile &>/dev/null

    #activate it
    swapon /swapfile &>/dev/null

    #enable it at boot
    echo "/swapfile swap swap defaults 0 0" >>$FSTAB
}


rootfs_ask()
{
    yes_no "Expand Root Filesystem" "Do you want to grow your root filesystem?\n\nWARNING: Before continuing, please save any work as the system will automatically reboot after re-partitioning"
        if [ $? == 0 ]; then
            touch /.rootfs-repartition
            rootfs_grow
        fi
}


rootfs_grow()
{
    # Do we need to repartition?
    [ ! -e /.rootfs-repartition ] && return 0

    # Check for kernel cmdline parameter 'nofsresize'
    [ $(cat /proc/cmdline |grep -cim1 nofsresize) -eq 1 ] && return 0

    if [ ! -e /.rootfs-grow ]; then
        ROOTPART=$(lsblk -lno NAME,MOUNTPOINT | sed -E 's/\s+/,/g' | grep ',/$' | cut -d',' -f1)
        ROOTDEV="/dev/$(lsblk -lno PKNAME /dev/$ROOTPART)"
        ROOTTYPE=$(lsblk -lno FSTYPE /dev/$ROOTPART)
        # Get current partition number
        # PARTNUM=$(lsblk -lno "MAJ:MIN" /dev/$ROOTPART | cut -d':' -f2) - It is not reliable
        # Use the old school method
        PARTNUMS=($(echo "$ROOTPART" | grep -oE '[0-9]+'))
        PARTNUM=${PARTNUMS[-1]}
        echo "[+] Root partition: $ROOTPART"
        echo "[+] Device the root partition is in: $ROOTDEV"
        echo "[+] Root filesystem: $ROOTTYPE"
        echo "[+] Number of the root partition: $PARTNUM"

        if [ "$ROOTDEV" -a "$ROOTPART" -a "$ROOTTYPE" -a "$PARTNUM" ]; then
            # Get partitions
            PARTS=($(lsblk -o NAME -ln $ROOTDEV))
            echo "[+] Last partition of this disk: ${PARTS[-1]}"
            if [ "$ROOTPART" != "${PARTS[-1]}" ]; then
                echo "[-] Jesus, don't even think about it; Your partition is not the last partition!"
                rm /.rootfs-repartition
	        return 1
            fi
            if [ "$DEBUG" ]; then
                echo "[D] That's all we need to know."
                exit 0
            fi
	    echo "[+] Okay, your root partition is the last partition. Proceeding."
            # Resize partition
            # Call sfdisk to grow this partition, gently
            # It will not touch anything else.
            echo ', +' | sfdisk --force -N $PARTNUM $ROOTDEV
            # Okay, we are ready to grow
            touch "/.rootfs-grow"
            
            systemctl enable rootfs-grow.service &>/dev/null
            systemctl reboot &>/dev/null
        fi
    else
        ROOT_PART=$(mount |grep 'on / type'|awk '{ print $1 }')
        if mount | grep -q 'on / type ext4'; then
            resize2fs $ROOT_PART &>/dev/null
        elif mount | grep -q 'on / type btrfs'; then
            btrfs filesystem resize max / &>/dev/null
        fi
        rm -f /.rootfs-grow /.rootfs-repartition &>/dev/null
        # Don't want it running every boot as its job is already done.
        systemctl disable rootfs-grow.service &>/dev/null
    fi
}


menu_swap()
{
    local MENU_TITLES=(
    "Swap File Selection" "Choose required swap file size")

    local MENU_BUTTONS=("Select" "Cancel")

    local MENU_ITEMS=(
    "1. 256 MB " "Create and enable a 256MB swap file"
    "2. 512 MB " "Create and enable a 512MB swap file"
    "3. 1024 MB  " "Create and enable a 1024MB (1GB) swap file")

    declare -A MENU_ACTIONS=(
    [${MENU_ITEMS[0]}]="swap_add 256 ; break"
    [${MENU_ITEMS[2]}]="swap_add 512 ; break"
    [${MENU_ITEMS[4]}]="swap_add 1024 ; break")

    dialog_menu $MENU_ARGS
}


menu_rtc()
{
    #We don't have to enable i2c interface first here as the DTO should
    #automatically enable it (refer: /boot/overlay/README)
    dto_ask i2c-rtc --no-reboot

    #check we haven't bailed or disabled the driver
    [ $BAILED -eq 1 -o $DRV_DISABLED -eq 1 ] && break

    #ensure nortc is not in cmdline.txt
    sed -i 's/ nortc//' $CMD_TXT &>/dev/null

    local MENU_TITLES=(
    "RTC Device Selection" "Choose your I2C Real Time Clock device")

    local MENU_BUTTONS=("Select" "Cancel")

    local MENU_ITEMS=(
    "1. DS1307 " "Select the DS1307 device"
    "2. DS3231  " "Select the DS3231 device"
    "3. MCP7941x " "Select the MCP7941x device"
    "4. PCF2127 " "Select the PCF2127 device"
    "5. PCF8523 " "Select the PCF8523 device"
    "6. PCF8563 " "Select the PCF8563 device")

    declare -A MENU_ACTIONS=(
    [${MENU_ITEMS[0]}]="dto_prm_update i2c-rtc ds1307 ; break"
    [${MENU_ITEMS[2]}]="dto_prm_update i2c-rtc ds3231 ; break"
    [${MENU_ITEMS[4]}]="dto_prm_update i2c-rtc mcp7941x ; break"
    [${MENU_ITEMS[6]}]="dto_prm_update i2c-rtc pcf2127 ; break"
    [${MENU_ITEMS[8]}]="dto_prm_update i2c-rtc pcf8523 ; break"
    [${MENU_ITEMS[10]}]="dto_prm_update i2c-rtc pcf8563 ; break")

    dialog_menu $MENU_ARGS

    ask_reboot
}


menu_drivers()
{
    local MENU_TITLES=(
    "Enable or Disable System Drivers" "Choose an Option")

    local MENU_BUTTONS=("Select" "Main Menu")

    local MENU_ITEMS=(
    "1. Mesa DRM VC4" "Mesa/DRM VC4 driver for Rpi (Experimental)"
    "2. Pi Camera" "Enable or disable the RPi Camera"
    "3. LIRC RPi" "Linux Infrared Remote Control for the RPi (LIRC)"
    "4. I2C RTC" "Realtime Cock (RTC) support"
    "5. RPi3 Bluetooth" "RPi3 bluetooth support")

    declare -A MENU_ACTIONS=(
    [${MENU_ITEMS[0]}]=mesa_vc4
    [${MENU_ITEMS[2]}]=pi_camera
    [${MENU_ITEMS[4]}]="dto_ask lirc-rpi"
    [${MENU_ITEMS[6]}]=menu_rtc
    [${MENU_ITEMS[8]}]="bt_ask")

    dialog_menu $MENU_ARGS
}


menu_params()
{
    local MENU_TITLES=(
    "Enable or Disable Device Tree Paramters" "Choose an Option")

    local MENU_BUTTONS=("Select" "Main Menu")

    local MENU_ITEMS=(
    "1. I2C interface" "Inter-Integrated Circuit (i2c) interface"
    "2. I2S interface" "Inter-IC Sound, (i2s) interface"
    "3. SPI interface" "Serial Peripheral Interface"
    "4. Audio" "On-board ALSA audio interface")

    declare -A MENU_ACTIONS=(
    [${MENU_ITEMS[0]}]="dtp_ask i2c"
    [${MENU_ITEMS[2]}]="dtp_ask i2s"
    [${MENU_ITEMS[4]}]="dtp_ask spi"
    [${MENU_ITEMS[6]}]="dtp_ask audio")

    dialog_menu $MENU_ARGS
}


menu_main()
{
    local MENU_TITLES=("System Configuration" "Choose an Option")

    local MENU_BUTTONS=("Select" "Exit")

    local MENU_ITEMS=(
    "1. DT Paramters" "Enable or disable Device Tree (DT) parameters"
    "2. Hardware Support" "Enable or disable hardware support / drivers"
    "3. Expand Root FS" "Expand (grow) root filesystem on SD card"
    "4. Add Swap File" "Add and enable a swap file"
    "5. About $NAME" "Information about this configuration utility")

    declare -A MENU_ACTIONS=(
    [${MENU_ITEMS[0]}]=menu_params
    [${MENU_ITEMS[2]}]=menu_drivers
    [${MENU_ITEMS[4]}]=rootfs_ask
    [${MENU_ITEMS[6]}]=menu_swap
    [${MENU_ITEMS[8]}]=about)

    dialog_menu $MENU_ARGS

    #clear screen & exit
    clear; exit 0
}


about()
{
    msg_box "About $NAME - Version: $VERSION"  "\
$NAME allows for easy configuration of various \
system wide options in AOSC OS. If you have heavily \
customized your AOSC OS installation, some configure \
options may not function correctly.\n\n\
Copyright (C) $YEAR, $AUTHORS.\n\
$NAME is released under GPL licence version 3.\n\n\
Report issues to: $BUG_REPORTS"
}


usage()
{
echo "Usage: $NAME [OPTION] <overlay|paramater|option|value>

Configuration of various system wide options in FedBerry.

--dto-enable <overlay>      Enable Device Tree overlay
--dto-disable <overlay>     Disable Device Tree overlay
--dtp-enable <paramater>    Enable Device Tree parameter
--dtp-disable <paramater>   Device Tree parameter
--cfg-enable <option>       Enable config.txt option
--cfg-disable <option>      Disable config.txt option
--rootfs-grow               Expand (grow) root filesystem on SD card
--bt-enable                 Enable bluetooth support for RPi3
--bt-disable                Disable bluetooth support for RPi3
--add-swap <size in MB>     Add and enable a swap file
--version                   Output version information and exit
--help                      Display this help and exit"
}


requires()
{

    if [ $UID != 0 ]; then
        echo "This script must be run as root user."
        exit 1
    fi


    if [[ $NO_DIALOG -eq 0 ]]; then
        # we require whiptail
        if [ ! -f /usr/bin/whiptail ]; then
            echo "$NAME requires whiptail\n Please install"
            #offer to install here?
            exit 1
        fi
    fi

}


cmdline()
{
    CMD_ARG=$2

    if [[ "$CMD_ARG" == "" ]]; then
        echo "Missing argument"
        exit 0
    fi

    # we don't want a dialog or questions
    NO_DIALOG=1

    # check for script run requirements
    requires

    # check for & clean config.txt if necessary
    cfg_check

    # exclude some special cases for the moment
    if [[ "$CMD_ARG" == "vc4-kms-v3d" ]] || [[ "$CMD_ARG" == "start_x" ]]; then
        echo "Enabling/disabling ${REF_NAMES[$CMD_ARG]} via cmdline is currently unsupported"
        exit 0
    fi

    # weed out '-overlay' in dto names
    if [[ "$1" == "dto_enable" ]] || [[ "$1" == "dto_disable" ]]; then
        CMD_ARG=$(echo $CMD_ARG| sed 's/-overlay//')
    fi

    $1 $CMD_ARG
}


main()
{
    # check for script run requirements
    requires

    # check for & clean config.txt if necessary
    cfg_check

    # set WT dialog menu sizes
    dialog_size

    # start main menu
    menu_main
}



###
# Main
###

case $1 in
    "--dto-enable")
        cmdline dto_enable $2 ;;
    "--dto-disable")
        cmdline dto_disable $2 ;;
    "--dtp-enable")
        dtp_enable $2 ;;
    "--dtp-disable")
        dtp_disable $2 ;;
    "--cfg-enable")
        cmdline cfg_enable $2 ;;
    "--cfg-disable")
        cmdline cfg_enable $2 ;;
    "--rootfs-grow")
        NO_DIALOG=1 rootfs_grow ;;
    "--bt-enable")
        NO_DIALOG=1 bt_enable ;;
    "--bt-disable")
        NO_DIALOG=1 bt_disable ;;
    "--add-swap")
        NO_DIALOG=1 swap_add $2;;
    "--help")
        usage ;;
    "--version")
        echo "$NAME - Version: $VERSION" ;;
    "")
        main ;;
    *)
        echo "Unknown cmdline argument(s) $@" ;;
esac
